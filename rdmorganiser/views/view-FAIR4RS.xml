<?xml version="1.0" encoding="UTF-8"?>
<rdmo xmlns:dc="http://purl.org/dc/elements/1.1/" created="2024-03-12T15:06:04.561515+01:00" version="2.1.3">
	<view dc:uri="https://rdmo.mpdl.mpg.de/views/FAIR4RSview">
		<uri_prefix>https://rdmo.mpdl.mpg.de/</uri_prefix>
		<uri_path>FAIR4RSview</uri_path>
		<dc:comment>View of the FAIR Principles for Research Software (https://zenodo.org/record/6623556)</dc:comment>
		<order>0</order>
		<title lang="en">FAIR4RS</title>
		<help lang="en">View of the FAIR Principles for Research Software (&lt;a href=&quot;https://zenodo.org/record/6623556&quot; target=&quot;_blank&quot;&gt;https://zenodo.org/record/6623556&lt;/a&gt;)</help>
		<title lang="de">FAIR4RS</title>
		<help lang="de">Ansicht der FAIR Principles for Research Software (&lt;a href=&quot;https://zenodo.org/record/6623556&quot; target=&quot;_blank&quot;&gt;https://zenodo.org/record/6623556&lt;/a&gt;)</help>
		<title lang="fr">FAIR4RS</title>
		<help lang="fr">Vue des FAIR Principles for Research Software (&lt;a href=&quot;https://zenodo.org/record/6623556&quot; target=&quot;_blank&quot;&gt;https://zenodo.org/record/6623556&lt;/a&gt;)</help>
		<title lang="it">FAIR4RS</title>
		<help lang="it">Vista dei FAIR Principles for Research Software (&lt;a href=&quot;https://zenodo.org/record/6623556&quot; target=&quot;_blank&quot;&gt;https://zenodo.org/record/6623556&lt;/a&gt;)</help>
		<title lang="es">FAIR4RS</title>
		<help lang="es">Vista de los FAIR Principles for Research Software (&lt;a href=&quot;https://zenodo.org/record/6623556&quot; target=&quot;_blank&quot;&gt;https://zenodo.org/record/6623556&lt;/a&gt;)</help>
		<catalogs/>
		<template>{% load view_tags %}
&lt;h1&gt;FAIR4RS&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Project title:&lt;/strong&gt; {% render_value 'project/title' %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Start date:&lt;/strong&gt; {% render_value 'project/schedule/project_start' %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;End date:&lt;/strong&gt; {% render_value 'project/schedule/project_end' %}&lt;/p&gt;
{% get_values 'project/id' set_index=0 as id %}
&lt;p class=&quot;explanation&quot;&gt;Here, you can verify whether your responses to the Software Management Plan adress the the FAIR4RS principles. However, it is necessary for this that the SMP project is already filled with answers; there simply has to be enough information already available. Some questions from the SMP relate to several FAIR4RS aspects. Therefore, some answers are presented several times in different places. Likewise, several answers are also listed in the viewer under a FAIR4RS item, as they answer the item together thematically. If you discover that you have not fully addressed FAIR-related questions,
you can revisit the Software Management Plan and provide the necessary details. Please note that the FAIR4RS viewer is only available in English.&lt;/p&gt;
&lt;h2&gt;Findability&lt;/h2&gt;
&lt;h3&gt;F: Software and its associated metadata are easy for both humans and machines to find&lt;/h3&gt;
&lt;ul&gt;
    &lt;li class=&quot;bold&quot;&gt;F1. Software is assigned a globally unique and persistent identifier&lt;/li&gt;
    &lt;ul&gt;
        &lt;li class=&quot;category1&quot;&gt;
            &lt;a class=&quot;link&quot; href=&quot;https://qa-rdmo.mpdl.mpg.de/projects/{{id.0.value}}/questions/2515/&quot; target=&quot;_blank&quot;&gt;F1.1. Components of the software representing levels of granularity are assigned distinct identifiers&lt;/a&gt;
            &lt;span class=&quot;info-icon&quot; data-info=&quot;The use of identifiers for more than the software project (often synonymous with “software concept” or “software product”) improves findability by enabling components to be assigned distinct identifiers e.g, a software library, and a function in that library. The relationship between these components is embodied in the associated metadata.&quot;&gt;&amp;#9432;&lt;/span&gt;
        &lt;/li&gt;
        &lt;ul class=&quot;answers&quot;&gt;
            &lt;li&gt;The single software components can be identified implicitely via the version number and the source file name.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li class=&quot;category&quot;&gt;F1.2. Different versions of the software are assigned distinct identifiers&lt;span class=&quot;info-icon&quot; data-info=&quot;To make different versions of the same software (or component) findable, each version needs to be assigned a different identifier. The relationship between versions is embodied in the associated metadata. What is considered a “version” is defined by the owner of the software: in many cases this will be something that the owner wants to specifically identify and use and/or “release” or “publish” so that others can use and reference/cite. There are existing software engineering practices (e.g., version control, semantic versioning) around the management and versioning of software that may form part of the implementation of these relationships.&quot;&gt;&amp;#9432;&lt;/span&gt;
        &lt;/li&gt;
        &lt;ul class=&quot;answers&quot;&gt;
          &lt;li&gt;
            Versioning will be handled as follows:
            &lt;ul class=&quot;nested-answers&quot;&gt;
              {% get_values 'smp/versioning' set_index=0 as keyword %}
              {% for value in keyword %}
              	&lt;li&gt;{{value.value}}&lt;/li&gt;
              {% endfor %}
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;
    &lt;li class=&quot;bold&quot;&gt;F2. Software is described with rich metadata&lt;span class=&quot;info-icon&quot; data-info=&quot;Software requires descriptive metadata to support indexing, search and discoverability. This metadata must itself be FAIR (F4), should follow community standards, and use controlled vocabularies. The FAIR4RS principles do not define which standards should be used, as this is better captured in guidance for implementing the principles coming out of each community. R1,R1.1, and R1.2 describe categories of metadata that enable reuse.&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
    &lt;ul class=&quot;answers&quot;&gt;
        &lt;li&gt;{% render_value 'smp/software-metadata' %}&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li class=&quot;bold&quot;&gt;F3. Metadata clearly and explicitly include the identifier of the software they describe&lt;span class=&quot;info-icon&quot; data-info=&quot;The association between the metadata (wherever it is stored; see F4) and the software should be made explicit by mentioning the software’s globally unique and persistent identifier in its associated metadata. In conjunction with A1, this means the metadata describes how the software can be obtained. Metadata are not required to include references for all of the softwares dependencies in order for software to be findable. I2 and R2 describe how references to dependencies increase the likelihood that software is interoperable and reusable.&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
    &lt;ul class=&quot;answers&quot;&gt;
      &lt;li&gt;
        The following identifiers are used:
        &lt;ul class=&quot;nested-answers&quot;&gt;
            &lt;li&gt;{% render_value 'smp/software-pid' %}&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;li class=&quot;bold&quot;&gt;F4. Metadata are FAIR, searchable and indexable&lt;span class=&quot;info-icon&quot; data-info=&quot;Making the metadata about the software FAIR, including making it readable and discoverable byboth humans and machines, improves the findability of software by supporting searching andindexing by others. It allows the metadata to be published in or harvested by a registry orcatalog or repository, or by a search engine. FAIR metadata also enables and encourages citation of research software.&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
    &lt;ul class=&quot;answers&quot;&gt;
        &lt;li&gt;Searchability of the software metadata is granted by the platform where the software is stored.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;h2&gt;Accessibility&lt;/h2&gt;
&lt;h3&gt;A: Software, and its metadata, is retrievable via standardized protocols&lt;/h3&gt;
&lt;ul class=&quot;answers&quot;&gt;
    &lt;li&gt;{% render_value 'smp/software-sharing' %}&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li class=&quot;bold&quot;&gt;A1. Software is retrievable by its identifier using a standardized communications protocol &lt;span class=&quot;info-icon&quot; data-info=&quot;Different types of software have different methods for access. For instance, software that is only available in source code form may be downloaded from a repository before being compiled locally, whereas software hosted as a service on a remote server may be accessed without retrieving it. This principle states that obtaining the software should not require specialized or proprietary tools or communication methods. For much software, there are commonly used technical communications protocols used to access the software, such as HTTPS.&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
    &lt;ul&gt;
        &lt;li class=&quot;category&quot;&gt;A1.1. The protocol is open, free, and universally implementable&lt;span class=&quot;info-icon&quot; data-info=&quot;It is the openness of the communications protocol (including the resolver for the identifier) that is important, not the implementation of the infrastructure that supports it. Here “open” means that there are no restrictions to implementing it and “free” means that there are no fees or licensing costs to implement it&quot;&gt;&amp;#9432;&lt;/span&gt;
        &lt;/li&gt;
        &lt;ul class=&quot;answers&quot;&gt;
            &lt;li&gt;The communication protocol is determined by the platform where the software is stored.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li class=&quot;category&quot;&gt;A1.2. The protocol allows for an authentication and authorization procedure, where necessary&lt;span class=&quot;info-icon&quot; data-info=&quot;The FAIR Guiding Principles put specific emphasis on enhancing the ability of machines to use digital objects. In the context of software, there are often conditions of access, for instance, requiring a license server to be contacted, requirement for payment before use, or restrictions based on the privilege level of the user.&quot;&gt;&amp;#9432;&lt;/span&gt;
        &lt;/li&gt;
        &lt;ul class=&quot;answers&quot;&gt;
            &lt;li&gt;The communication protocol is determined by the platform where the software is stored.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;
    &lt;li class=&quot;bold&quot;&gt;A2. Metadata are accessible, even when the software is no longer available&lt;span class=&quot;info-icon&quot; data-info=&quot;Availability of software may change over time, because there is a cost to maintaining access or because the software has degraded and is no longer safely usable, or because dependencies are no longer available. The metadata describing the software is generally easier and cheaper to store and maintain than the software itself (e.g., in the software repository, or in a software registry or catalog) and there is value in understanding the details of the software even if it is no longer accessible.&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
     &lt;ul class=&quot;answers&quot;&gt;
         &lt;li&gt;Long-term accessibility of the software metadata is granted by the platform where the software is stored.&lt;/li&gt;
     &lt;/ul&gt;
&lt;/ul&gt;
&lt;h2&gt;Interoperability&lt;/h2&gt;
&lt;h3&gt;I: Software interoperates with other software by exchanging data and/or metadata, and/or through interaction via application programming interfaces (APIs), described through standards&lt;/h3&gt;
&lt;ul&gt;
    &lt;li class=&quot;bold&quot;&gt;I1. Software reads, writes and exchanges data in a way that meets domain-relevant community standards&lt;span class=&quot;info-icon&quot; data-info=&quot;Software interoperates through the exchange of data. This includes the use of data and metadata types, controlled vocabularies, and formats that are formally defined through standards to facilitate the exchange. Whereas F4 requires that metadata describing the software are FAIR, this principle ensures that the way that software interacts with other software is clearly described. A domain-relevant standard is an agreed standard that addresses the needs of a given community (or communities). Examples of community standards for data are curated by the FAIRSharing Registry athttps://fairsharing.org/standards/.&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
    &lt;ul class=&quot;answers&quot;&gt;
      &lt;li&gt;
        The following coding standards and guidelines are followed:
        &lt;ul class=&quot;nested-answers&quot;&gt;
            {% get_values 'smp/coding-standards' set_index=0 as keyword %}
              {% for value in keyword %}
              	&lt;li&gt;{{value.value}}&lt;/li&gt;
              {% endfor %}
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;li class=&quot;bold&quot;&gt;I2. Software includes qualified references to other objects&lt;span class=&quot;info-icon&quot; data-info=&quot;Some software includes references to external data objects required to execute the software (e.g., parameter files for certain applications). Ideally, the data would be FAIR as well, and references to external data would be fully qualified. Qualified references should be to digital objects (e.g., metadata, other software, data), as well as to non-digital objects that have a virtual presence in digital systems (e.g., samples, reagents, instruments, etc.) with which the software interacts. These qualified references should be described using identifiers and/or controlled vocabularies. “Qualified” means specifying the authoritative source for an identifier or vocabulary item, possibly including a resolvable reference to further information about the source. Ideally this is in a form that includes a resolver within the reference (e.g., in the form of a persistent identifier, or URL). This information can also improve the reusability of software by explicitly including references to articles and data sets that document its use.&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
    &lt;ul class=&quot;answers&quot;&gt;
      &lt;li&gt;
        The software relies on the following external services:
        &lt;ul class=&quot;nested-answers&quot;&gt;
             {% get_values 'smp/web-services' set_index=0 as keyword %}
              {% for value in keyword %}
              	&lt;li&gt;{{value.value}}&lt;/li&gt;
              {% endfor %}
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;h2&gt;Reusability&lt;/h2&gt;
&lt;h3&gt;R: Software is both usable (can be executed) and reusable (can be understood, modified, built upon, or incorporated into other software)&lt;/h3&gt;
&lt;ul class=&quot;answers&quot;&gt;
    &lt;li&gt;&lt;i&gt;Preservation of the software:&lt;/i&gt; {% render_value 'smp/preservation' %}&lt;/li&gt;
    &lt;li&gt;&lt;i&gt;Usability of the software:&lt;/i&gt; {% render_value 'smp/re-usable' %}&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
    &lt;li class=&quot;bold&quot;&gt;R1. Software is described with a plurality of accurate and relevant attributes&lt;span class=&quot;info-icon&quot; data-info=&quot;It is easier to reuse (and find) software if there are many descriptive labels attached to it. F2requires software to be described by rich metadata. References provided by applying I2 can help document the use and purpose of the software. Software should be described for the categories of R1.1 (license), R1.2 (provenance), and additionally address the categories of metadata that facilitate reuse. Relevant attributes can be determined by repositories, and by communities who create and reuse software. Plurality means that, where possible, multiple terms for the same, similar, or overlapping concepts should be provided to enable the broadest possible reuse Metadata and documentation are distinct, potentially complementary, concepts. Metadata about software can be included in documentation, or in the code itself, or in a separate location. Metadata included in the documentation are generally not machine readable, or indexable. This does, however, support the reusability of software particularly from a human perspective.&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
    &lt;ul&gt;
        &lt;li class=&quot;category&quot;&gt;R1.1. Software is given a clear and accessible license&lt;span class=&quot;info-icon&quot; data-info=&quot;To enable reuse, software must have a license that clearly describes how it can be used and reused, ideally with conditions that are readable by humans and machines. Licenses are often referred to by name, but machine readable licenses can be specified by reference to a standard vocabulary such as the SPDX License List4 (SPDX Consortium, 2020). To support a wide range of reuse scenarios, the license should be as unrestrictive as possible and, to avoid license proliferation, choosing a widely used and recognized license is strongly recommended. This license must also be compatible with the requirements of the licenses of the software’s dependencies so that the software can be legally combined&quot;&gt;&amp;#9432;&lt;/span&gt;
        &lt;/li&gt;
    &lt;ul class=&quot;answers&quot;&gt;
      &lt;li&gt;
        Software:
        &lt;ul class=&quot;nested-answers&quot;&gt;
            &lt;li&gt;{% render_value 'smp/software-license' %}&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul class=&quot;answers&quot;&gt;
      &lt;li&gt;
        Third-party components:
        &lt;ul class=&quot;nested-answers&quot;&gt;
            &lt;li&gt;{% render_value 'smp/third-party-licenses' %}&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
        &lt;li class=&quot;category&quot;&gt;R1.2. Software is associated with detailed provenance&lt;span class=&quot;info-icon&quot; data-info=&quot;Software provenance is a type of metadata that describes why and how the software came to be, as well as who contributed what, when and where. Provenance is sometimes referred to as lineage or pedigree. This extends beyond capturing a log of changes to source code as it is developed. Good provenance metadata clarifies the origins and intent behind the development of the software, and establishes authenticity and trust. As a type of metadata this overlaps with the metadata called for in guiding principles F2 and F4.&quot;&gt;&amp;#9432;&lt;/span&gt;
        &lt;/li&gt;
        &lt;ul class=&quot;answers&quot;&gt;
            &lt;li&gt;Information on provenance is granted by the platform where the software is stored.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;
    &lt;li class=&quot;bold&quot;&gt;R2. Software includes qualified references to other software&lt;span class=&quot;info-icon&quot; data-info=&quot;Software is rarely standalone and in most cases is built upon other software (e.g., dependencies), it should include appropriate references to other software (e.g., requirements, imports, libraries) which are necessary to compile and run the software. “Qualified” here means specifying the authoritative source for an identifier, possibly including a resolvable reference to further information about the source. To follow this principle, it is desirable but not required that the other software referenced implements the FAIR4RS Principles. In many programming languages, base methods or functions take a reference to a named entity, possibly in combination with a version number or qualifying domain and resolves this to a source. This principle goes beyond this in calling for qualified references to external dependencies, meaning that the reference itself resolves to the source via the qualifying authority. This guiding principle calls for qualified references in software to other software (in aid of reuse).Principle I2 calls for qualified references to anything other than software (in aid of interoperability).&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
    &lt;ul class=&quot;answers&quot;&gt;
      &lt;li&gt;
        This software uses the following external components and libraries:
        &lt;ul class=&quot;nested-answers&quot;&gt;
              {% get_values 'smp/external-components' set_index=0 as keyword %}
              {% for value in keyword %}
              	&lt;li&gt;{{value.value}}&lt;/li&gt;
              {% endfor %}
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;li class=&quot;bold&quot;&gt;R3. Software meets domain-relevant community standards&lt;span class=&quot;info-icon&quot; data-info=&quot;Software, including its documentation and license, should meet domain-relevant community standards and coding practices (e.g., choice of programming language, standards for testing, usage of file formats, accessibility [in the sense of usable by as many people as possible]) that enable reuse. While the FAIR4RS Principles do not specify particular community standards, the intent is to ensure that practitioners are aware of what others are doing and using in the community, e.g., through initiatives like FAIRsharing (Sansone et al., 2019), whilst acknowledging that community standards are (and should be) under constant development&quot;&gt;&amp;#9432;&lt;/span&gt;
    &lt;/li&gt;
    &lt;ul class=&quot;answers&quot;&gt;
      &lt;li&gt;
        The following third-party requirements are followed:
        &lt;ul class=&quot;nested-answers&quot;&gt;
            &lt;li&gt;{% render_value 'smp/community-requirements' %}&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;

&lt;style&gt;
    ul{
        list-style-type: none;
    }
    h2, h3{
        margin:0;
    }
    h3{
        line-height: 20px;
        margin-bottom: 10px;
    }
    h2{
        margin-top: 28px;
    }
    .link{
    	color: inherit !important;
        text-decoration: none;
        color: black;
    }
    .bold{
        font-weight: bold;
        margin-top: 10px;
    }
    .category{
        font-style: italic;
        margin-top: 10px;
    }
    .explanation{
        font-style: italic;
    }
    .answers{
        list-style-type: disc;
        
    }
    .category1{
        font-style: italic;
        text-decoration: none;
    }
    .info-icon{
        position: absolute;
        margin-left:5px;
        font-style: normal;
        font-weight: normal;
    }
    .info-icon:hover::after{
        content: attr(data-info);
        position: absolute;
        left: 0;
        top: 100%;
        padding: 10px;
        background-color: #fff;
        color: black;
        border-radius: 4px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        z-index: 1;
        width: 500px;
        line-height: 1.4;
        font-size: 14px;
    }
    .nested-answers {
        list-style-type: circle; 
    }
&lt;/style&gt;</template>
	</view>
</rdmo>
